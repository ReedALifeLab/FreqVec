The code in this project creates and plots heatmaps of word vector models on inputs in the form of csvs. It's fairly simple to run. Currently, Autotest.py creates a similarity matrix (and optionally a heatmap) for the input.
In order to run the code, you need to put all of the .py files into a folder with the input and a sub-folder titled "test_data". If you want to use the "nouns" tag, you will also need a folder entitled "hnp-proc". If you want to use the "sic" tag, you will need to add a folder titled "sic_descriptions" and fill it with the processed SIC group descriptions.
To control the code, you need to edit the global variables in Autotest (or make your own version). In Autotest, you should change INPUTPATH to the name of the csv file you want to use as input. MODELS_TO_TEST is a list, which should have a tuple for each model you want to make, with the parameters for the model in the specific order (tags, kind, threshold). PLOT_HEAT tells the program whether to make a heatmap for the output similarity matrix, and PLOT_SHUFFLE tells the program whether to shuffle the similarity matrix and make a heatmap based on the shuffled version (which breaks up SIC and CIK squares in the heatmap). I haven't yet made a model with these last two variables adjustable, so there is a chance of a bug here.
When making heatmaps, the text size is not automatically set based on the size of the data, and instead has to be set manually. A font scale of 0.004 works well for a corpus of around 675 documents, and 0.8 works well for ~20 documents.
In order to split the similarity matrix for the whole corpus up by year, put yearlyplots.py into a folder with the similarity matrix and change the argument to the pandas.read_csv call to the name of the matrix you want to split up. Then you can run yearlyplots, but if you don't want to make heatmaps you will need to comment out the call to plot_heat_map. In this version of plots as well, text size is not automatically set, so you might have to experiment to find an appropriate font scale.
Finally, SIC_Compiler.py is supposed to combine SIC group descriptions into a single document for each major group or division, although currently it only works for divisons. None of the other code actually calls it, although there is a commented out part of Autotest that puts these documents into the corpus as the model is made. For most uses SIC_Compiler.py is not necessary.